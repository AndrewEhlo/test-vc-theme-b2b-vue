# v3.800.4
# https://virtocommerce.atlassian.net/browse/VCST-488
name: Theme CI
on:
  workflow_dispatch:
  push:
    paths-ignore:
      #- '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'
    branches:
      [master, dev]
  pull_request:
    branches:
      [master, dev]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'build/**'
      - 'README.md'
      - 'LICENSE'

jobs:
  ci:
    runs-on: ubuntu-20.04
    env: 
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      BLOB_SAS: ${{ secrets.BLOB_TOKEN }}
      VERSION_SUFFIX: ""
    outputs:
      VERSION_SUFFIX: '${{ steps.versionSuffix.outputs.VERSION_SUFFIX }}'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.GITHUB_REF_NAME }}

    # - name: Set up Node 20
    #   uses: actions/setup-node@v4
    #   with:
    #     node-version: '20'

    # - name: Enable corepack
    #   run: |
    #     corepack enable

    # - name: Setup sonarqube
    #   uses: warchant/setup-sonar-scanner@v8

    - name: Get Image Version
      uses: VirtoCommerce/vc-github-actions/get-image-version@master
      id: image

    - name: Set VERSION_SUFFIX variable
      id: versionSuffix
      run: |
        if [ '${{ github.event_name }}' = 'workflow_dispatch' ]; then
          echo "VERSION_SUFFIX=${{ steps.image.outputs.fullSuffix }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION_SUFFIX=${{ steps.image.outputs.suffix }}" >> $GITHUB_OUTPUT
        fi;

    # - name: Get changelog
    #   id: changelog
    #   uses: VirtoCommerce/vc-github-actions/changelog-generator@master

    # - name: SonarCloud Scan
    #   uses: VirtoCommerce/vc-github-actions/sonar-theme@master
    #   with:
    #     projectVersion: ${{ steps.image.outputs.fullVersion }}

    # - name: Update package.json Version
    #   run: |
    #     yarn version ${{ env.VERSION }}
    # - name: Install dependencies
    #   run: |
    #     yarn install
    # - name: Build
    #   run: |
    #     yarn build
    # - name: Unit Tests
    #   run: |
    #     yarn test:unit --run
    # - name: Typing Tests
    #   run: |
    #     yarn test:typing --run
    # - name: Packaging
    #   run: |
    #     yarn compress

    # - name: Publish
    #   if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master')}}
    #   id: publish
    #   uses: VirtoCommerce/vc-github-actions/publish-theme@master
    #   with:
    #     artifactPath: ${{ steps.build.outputs.artifactPath }}
    #     artifactName: ${{ steps.build.outputs.artifactName }}
    
    # - name: Install VirtoCommerce.GlobalTool
    #   uses: VirtoCommerce/vc-github-actions/setup-vcbuild@master

    # - name: Create GH Release
    #   run: |
    #     gh release create ${{ steps.image.outputs.shortVersion }} \
    #           --repo="$GITHUB_REPOSITORY" \
    #           --title="${GITHUB_REPOSITORY#*/} ${{ steps.image.outputs.shortVersion }}" \
    #           --notes=${{ steps.changelog.outputs.changelog }} \
    #           "artifacts/vc-theme-b2b-vue-${{ steps.image.outputs.shortVersion }}.zip#${GITHUB_REPOSITORY#*/}-${{ steps.image.outputs.shortVersion }}.zip"
  
  gitops:
    # if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/master')}}
    if: ${{ github.event.pull_request.base.ref == 'refs/heads/main' && github.event_name == 'pull_request' }}
    needs: ci
    strategy:
      matrix:
        store: [B2B-store,B2C]
    runs-on: ubuntu-latest
    env:
      ARGO_APP_NAME: 'vcst-dev'
    steps:
      - name: Update environment
        run: |
            export PARAMETER_NAME=$(echo "themes.${{ matrix.store }}" | xargs)
            export PARAMETER_VALUE=$(echo "${{ needs.ci.outputs.VERSION_SUFFIX }}" | xargs)
            echo "vc-build CloudEnvSetParameter -EnvironmentName ${{ env.ARGO_APP_NAME }} -CloudToken ${{ secrets.VCST_PLATFORM_TOKEN }} -HelmParameters $PARAMETER_NAME=$PARAMETER_VALUE"
